import abc
from abc import ABC, abstractmethod
from ent.EntKind import EntKind as EntKind
from pathlib import Path
from ref.Ref import Ref as Ref
from typing import Any, List, Optional

class EntLongname:
    @property
    def longname(self) -> str: ...
    @property
    def name(self) -> str: ...
    def __init__(self, scope: List[str]) -> None: ...
    def __eq__(self, other: object): ...

class Location:
    def append(self, name: str) -> Location: ...
    def to_longname(self) -> EntLongname: ...
    def __init__(self, scope: Optional[List[str]] = ...) -> None: ...
    def __eq__(self, other: object): ...
    @classmethod
    def global_name(cls, name: str) -> Location: ...

class Entity(ABC, metaclass=abc.ABCMeta):
    @classmethod
    def get_anonymous_ent(cls) -> Entity: ...
    longname: Any
    location: Any
    def __init__(self, longname: EntLongname, location: Location) -> None: ...
    def refs(self) -> List[Ref]: ...
    def set_refs(self, refs: List[Ref]): ...
    @abstractmethod
    def kind(self) -> EntKind: ...
    def add_ref(self, ref: Ref): ...
    def __eq__(self, other: object) -> bool: ...
    def direct_type(self) -> None: ...

class Variable(Entity):
    def __init__(self, longname: EntLongname, location: Location) -> None: ...
    def kind(self) -> EntKind: ...

class Function(Entity):
    def __init__(self, longname: EntLongname, location: Location) -> None: ...
    def kind(self) -> EntKind: ...

class Module(Entity):
    module_path: Any
    def __init__(self, file_path: Path) -> None: ...
    def kind(self) -> EntKind: ...
    @property
    def module_longname(self) -> EntLongname: ...

class ModuleAlias(Entity):
    module_path: Any
    alias_name: Any
    def __init__(self, file_path: Path, alias_location: Location) -> None: ...
    @property
    def module_longname(self) -> EntLongname: ...
    def kind(self) -> EntKind: ...

class Package(Entity):
    def __init__(self, file_path: Path) -> None: ...
    def kind(self) -> EntKind: ...

class Class(Entity):
    def __init__(self, longname: EntLongname, location: Location) -> None: ...
    def kind(self) -> EntKind: ...

class UnknownVar(Entity):
    def __init__(self, name: str, location: Location) -> None: ...
    def kind(self) -> EntKind: ...

class UnknownModule(Module):
    def __init__(self, name: str) -> None: ...
    def kind(self) -> EntKind: ...

class Parameter(Entity):
    def __init__(self, longname: EntLongname, location: Location) -> None: ...
    def kind(self) -> EntKind: ...

class Anonymous(Entity):
    def __init__(self) -> None: ...
    def kind(self) -> EntKind: ...

class ClassAttribute(Entity):
    def __init__(self, longname: EntLongname, location: Location) -> None: ...
    def kind(self) -> EntKind: ...

class ReferencedAttribute(Entity):
    def __init__(self, longname: EntLongname, location: Location) -> None: ...
    def kind(self) -> EntKind: ...

class UnresolvedAttribute(Entity):
    receiver_type: Any
    def __init__(self, longname: EntLongname, location: Location, receiver_type) -> None: ...
    def kind(self) -> EntKind: ...
