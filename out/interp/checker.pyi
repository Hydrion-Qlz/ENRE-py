import ast
import typing as ty
from dep.DepDB import DepDB as DepDB
from ent.entity import Entity as Entity, Module as Module
from interp.aval import ClassType as ClassType, ConstructorType as ConstructorType, EntType as EntType, ModuleType as ModuleType, SetAvaler as SetAvaler, UseAvaler as UseAvaler
from interp.env import ContinuousSubEnv as ContinuousSubEnv, EntEnv as EntEnv, OptionalSubEnv as OptionalSubEnv, ParallelSubEnv as ParallelSubEnv, ScopeEnv as ScopeEnv, SubEnv as SubEnv
from interp.manager_interp import InterpManager as InterpManager
from typing import Any

class AInterp:
    manager: Any
    module: Any
    global_env: Any
    def __init__(self, ctx: Module, manager: InterpManager) -> None: ...
    @property
    def dep_db(self) -> DepDB: ...
    def interp(self, stmt: ast.AST, env: EntEnv) -> None: ...
    def generic_interp(self, stmt: ast.AST, env: EntEnv) -> None: ...
    def interp_FunctionDef(self, def_stmt: ast.FunctionDef, env: EntEnv) -> None: ...
    def interp_ClassDef(self, class_stmt: ast.ClassDef, env: EntEnv) -> None: ...
    def interp_If(self, if_stmt: ast.If, env: EntEnv) -> None: ...
    def interp_For(self, for_stmt: ast.For, env: EntEnv) -> None: ...
    def interp_Assign(self, assign_stmt: ast.Assign, env: EntEnv) -> None: ...
    def interp_Expr(self, expr_stmt: ast.Expr, env: EntEnv) -> None: ...
    def process_assign_helper(self, rvalue_rxpr: ast.expr, target_exprs: ty.List[ast.expr], env: EntEnv): ...
    def interp_AugAssign(self, aug_stmt: ast.AugAssign, env: EntEnv): ...
    def interp_Import(self, import_stmt: ast.Import, env: EntEnv) -> None: ...
    def interp_ImportFrom(self, import_stmt: ast.ImportFrom, env: EntEnv) -> None: ...
    def interp_top_stmts(self, stmts: ty.List[ast.stmt], env: EntEnv = ...) -> None: ...
    def interp_stmts(self, stmts: ty.List[ast.stmt], env: EntEnv) -> None: ...
    def get_class_attr(self, target_exprs: ty.List[ast.expr], env: EntEnv): ...

def add_target_var(target: Entity, ent_type: EntType, env: EntEnv, dep_db: DepDB) -> None: ...
def process_parameters(def_stmt: ast.FunctionDef, env: ScopeEnv, dep_db: DepDB, class_ctx=...): ...
