import ast
from ent.entity import Entity as Entity, Location as Location
from interp.aval import EntType as EntType
from typing import Any, List, Optional, Tuple

class SubEnv:
    def __init__(self, pairs: Optional[Any] = ...) -> None: ...
    def join(self, sub_env: SubEnv) -> SubEnv: ...
    def add(self, target_ent: Entity, value: EntType) -> Any: ...
    def __getitem__(self, name: str) -> List[Tuple[Entity, EntType]]: ...

class ScopeEnv:
    class Hook:
        stmts: Any = ...
        scope_env: Any = ...
        def __init__(self, stmts: List[ast.stmt], scope_env: ScopeEnv) -> None: ...
    def add_hook(self, stmts: List[ast.stmt], scope_env: ScopeEnv) -> Any: ...
    def get_location(self) -> Location: ...
    def get_hooks(self) -> List[Tuple[List[ast.stmt], ScopeEnv]]: ...
    def __init__(self, ctx_ent: Entity, location: Location) -> None: ...
    def add_sub_env(self, sub_env: SubEnv) -> Any: ...
    def pop_sub_env(self) -> SubEnv: ...
    def append_ent(self, ent: Entity, ent_type: EntType) -> Any: ...
    def get_ctx(self) -> Entity: ...
    def __getitem__(self, name: str) -> List[Tuple[Entity, EntType]]: ...

class EntEnv:
    def add(self, target_ent: Entity, value: EntType) -> Any: ...
    def get_scope(self) -> ScopeEnv: ...
    def add_scope(self, scope_env: ScopeEnv) -> Any: ...
    def pop_scope(self) -> ScopeEnv: ...
    def add_sub_env(self, sub_env: SubEnv) -> Any: ...
    def pop_sub_env(self) -> SubEnv: ...
    def get_ctx(self) -> Entity: ...
    scope_envs: Any = ...
    def __init__(self, scope_env: ScopeEnv) -> None: ...
    def __getitem__(self, name: str) -> List[Tuple[Entity, EntType]]: ...
